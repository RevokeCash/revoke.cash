import { track } from '@amplitude/analytics-browser';
import { useQuery } from '@tanstack/react-query';
import { useAddressAllowances, useAddressPageContext } from 'lib/hooks/page-context/AddressPageContext';
import { Exploit, isAffectedByExploit } from 'lib/utils/allowance-exploit-list';
import { getAllowanceKey } from 'lib/utils/allowances';
import ExploitStatus from './ExploitStatus';

interface Props {
  exploit: Exploit;
}

const ExploitChecker = ({ exploit }: Props) => {
  const { address, selectedChainId } = useAddressPageContext();
  const { allowances, isLoading } = useAddressAllowances();

  // We wrap the status getting in a useQuery mainly so that we can make sure the analytics tracking is handled correctly
  const { data: status } = useQuery({
    queryKey: ['exploit-status', exploit.slug, allowances?.map(getAllowanceKey)],
    queryFn: () => {
      const status = isAffectedByExploit(allowances, exploit) ? 'affected' : 'safe';
      track('Exploit Checked', { exploit: exploit.slug, account: address, chainId: selectedChainId, status });
      return status;
    },
    enabled: !!address && !!allowances && !!selectedChainId,
  });

  if (!address || !selectedChainId) {
    return null;
  }

  if (isLoading || !allowances || !status) {
    return (
      <div className="animate-pulse bg-zinc-300 dark:bg-zinc-700 rounded-lg">
        {/* Add a placeholder ExploitStatus so the height won't change */}
        <div className="invisible">
          <ExploitStatus status="safe" exploit={exploit} address={address} chainId={selectedChainId} />
        </div>
      </div>
    );
  }

  return <ExploitStatus status={status} exploit={exploit} address={address} chainId={selectedChainId} />;
};

export default ExploitChecker;
