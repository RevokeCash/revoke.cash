import Button from 'components/common/Button';
import { useAddressPageContext } from 'lib/hooks/page-context/AddressPageContext';
import { parseInputAddress } from 'lib/utils/whois';
import useTranslation from 'next-translate/useTranslation';
import { useRef, useState } from 'react';
import { twMerge } from 'tailwind-merge';
import { Address } from 'viem';
import { useAccount } from 'wagmi';
import AddressSearchBox from '../common/AddressSearchBox';
import ChainSelect from '../common/ChainSelect';

interface Props {
  chainIds?: number[];
  onSubmit: (address: Address) => void;
}

export const AddressForm = ({ chainIds, onSubmit }: Props) => {
  const { t } = useTranslation();

  const [value, setValue] = useState<string>('');
  const [isFocused, setIsFocused] = useState<boolean>(false);
  const timerRef = useRef<NodeJS.Timeout>();

  const { address } = useAccount();
  const { selectedChainId, selectChain } = useAddressPageContext();

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    const address = event.target[0].value;
    const parsedAddress = await parseInputAddress(address);

    onSubmit(parsedAddress);
  };

  const onFocus = () => {
    clearTimeout(timerRef.current);
    setIsFocused(true);
  };

  const onBlur = () => {
    timerRef.current = setTimeout(() => setIsFocused(false), 200);
  };

  const onClick = () => {
    setValue(address);
    handleSubmit({ target: [{ value: address }] } as any);
  };

  return (
    <div className="relative flex flex-col gap-2">
      <div className="flex gap-2">
        <AddressSearchBox
          id="exploit-search"
          onSubmit={handleSubmit}
          onChange={(ev) => setValue(ev.target.value.trim())}
          value={value}
          placeholder={t('exploits:subpages.search.placeholder')}
          className="w-full text-base sm:text-lg"
          onFocus={onFocus}
          onBlur={onBlur}
        />
        <ChainSelect
          instanceId="exploit-chain-select"
          chainIds={chainIds}
          selected={selectedChainId}
          onSelect={selectChain}
        />
        <div className={twMerge('absolute -top-10', (!isFocused || !address) && 'hidden')}>
          <Button style="secondary" size="md" onClick={onClick}>
            {t('common:buttons.check_connected_address')}
          </Button>
        </div>
      </div>
    </div>
  );
};

export default AddressForm;
