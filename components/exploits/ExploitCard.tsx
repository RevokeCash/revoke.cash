import { ShieldExclamationIcon } from '@heroicons/react/24/outline';
import { ChevronRightIcon } from '@heroicons/react/24/solid';
import Button from 'components/common/Button';
import Card from 'components/common/Card';
import ChainLogo from 'components/common/ChainLogo';
import Href from 'components/common/Href';
import MarkdownProse from 'components/common/MarkdownProse';
import { Exploit, formatExploitAmount, getUniqueChainIds } from 'lib/utils/exploits';
import useTranslation from 'next-translate/useTranslation';
import { ReactNode } from 'react';

interface Props {
  exploit: Exploit;
  overview?: boolean;
}

const ExploitCard = ({ exploit, overview }: Props) => {
  const { t } = useTranslation();

  return (
    <Card icon={ShieldExclamationIcon} title={overview ? exploit.name : undefined} className="flex flex-col gap-2">
      <table className="table-auto">
        <tbody className="divide-y">
          <tr>
            <td className="py-2 w-40">{t('exploits:subpages.card.date')}</td>
            <td className="py-2">{exploit.date}</td>
          </tr>
          <tr>
            <td className="py-2">{t('exploits:subpages.card.amount')}</td>
            <td className="py-2">{formatExploitAmount(exploit.amount)}</td>
          </tr>
          <tr>
            <td className="py-2">{t('exploits:subpages.card.chains')}</td>
            <td className="py-2 flex gap-2 flex-wrap">
              {getUniqueChainIds(exploit).map((chainId, index) => (
                <ChainLogo tooltip chainId={chainId} key={index} />
              ))}
            </td>
          </tr>
          {!overview && (
            <tr>
              <td className="py-2">{t('exploits:subpages.card.articles')}</td>
              <td className="py-2">
                {exploit.metaArticleUrls
                  .map<ReactNode>((article) => (
                    <Href key={article} href={article} underline="hover" className="font-medium" external>
                      {new URL(article).hostname}
                    </Href>
                  ))
                  .reduce((prev, curr) => [prev, ', ', curr])}
              </td>
            </tr>
          )}
        </tbody>
      </table>

      <div>
        <h3 className="text-lg">{t('exploits:subpages.card.description')}</h3>
        <div className="flex flex-col gap-2">
          <div>
            {overview ? (
              <MarkdownProse content={exploit.description} />
            ) : (
              <MarkdownProse
                content={`${exploit.longDescription || exploit.description}\n\n${t('exploits:subpages.card.notice')}`}
              />
            )}
          </div>
          {overview && (
            <Button
              size="md"
              style="secondary"
              href={`/exploits/${exploit.slug}`}
              className="shrink-0 gap-2 sm:pr-3 my-2"
              router
            >
              {t('common:buttons.check')}
              <ChevronRightIcon className="w-5 h-5" />
            </Button>
          )}
        </div>
      </div>
    </Card>
  );
};

export default ExploitCard;
