import { CheckCircleIcon, ExclamationTriangleIcon, ShieldCheckIcon } from '@heroicons/react/24/outline';
import Button from 'components/common/Button';
import type { TokenAllowanceData } from 'lib/utils/allowances';
import { getChainName } from 'lib/utils/chains';
import type { Exploit, ExploiStatus as ExploitStatusString } from 'lib/utils/exploits';
import { shortenAddress } from 'lib/utils/formatting';
import { useTranslations } from 'next-intl';
import type { Address } from 'viem';

interface Props {
  address: Address;
  chainId: number;
  exploit: Exploit;
  status: ExploitStatusString;
  allowances: TokenAllowanceData[];
}

const ExploitStatus = ({ address, chainId, exploit, status, allowances }: Props) => {
  const t = useTranslations();

  const chainName = getChainName(chainId);

  const icons = {
    affected: <ExclamationTriangleIcon className="h-12 w-12 text-red-500" />,
    safe: <CheckCircleIcon className="h-12 w-12 text-green-500" />,
    previously_affected: <ShieldCheckIcon className="h-12 w-12 text-yellow-500" />,
  };

  const matchedAddresses = exploit.addresses.filter((address) =>
    allowances.some(
      (allowance) => allowance.chainId === address.chainId && allowance.payload?.spender === address.address,
    ),
  );

  const spenderSearch = matchedAddresses.map(({ address }) => address).join(',');
  const baseHref = `/address/${address}?chainId=${chainId}`;
  const href = status === 'affected' ? `${baseHref}&spenderSearch=${spenderSearch}` : baseHref;

  return (
    <div className={'rounded-lg border border-black dark:border-white p-4'}>
      <div className="flex flex-col sm:flex-row items-center gap-4">
        <div className="flex items-center gap-4">
          <div className="shrink-0">{icons[status]}</div>
          <div className="flex flex-col gap-2 ml-2">
            <h3 className="exploit-checker-status">{t(`exploits.subpages.result.${status}.title`)}</h3>
            <p className="text-sm">
              {t(`exploits.subpages.result.${status}.description`, {
                address: shortenAddress(address)!,
                chainName,
              })}
            </p>
          </div>
        </div>
        <Button className="shrink-0 w-full sm:w-fit" href={href} size="md" style="secondary" router>
          {t(`exploits.subpages.result.${status}.button`)}
        </Button>
      </div>
    </div>
  );
};

export default ExploitStatus;
