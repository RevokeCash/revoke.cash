import { ChevronLeftIcon } from '@heroicons/react/24/outline';
import Breadcrumb from 'components/common/Breadcrumb';
import Button from 'components/common/Button';
import AddressForm from 'components/exploits/AddressForm';
import ExploitCard from 'components/exploits/ExploitCard';
import ExploitChecker from 'components/exploits/ExploitChecker';
import ContentPageLayout from 'layouts/ContentPageLayout';
import { AddressPageContextProvider } from 'lib/hooks/page-context/AddressPageContext';
import { defaultSEO } from 'lib/next-seo.config';
import { Exploit, formatExploitAmount, getAllExploits, getExploitBySlug, getUniqueChainIds } from 'lib/utils/exploits';
import { GetStaticPaths, GetStaticProps } from 'next';
import { NextSeo } from 'next-seo';
import useTranslation from 'next-translate/useTranslation';
import { useState } from 'react';
import { Address } from 'viem';

interface Props {
  exploit: Exploit;
}

const ExploitDetailsPage = (props: Props) => {
  const { t } = useTranslation();
  const [address, setAddress] = useState<Address | undefined>();

  const year = String(new Date(props.exploit.date).getFullYear());
  const exploitName = props.exploit.name.includes(year) ? props.exploit.name : `${year} ${props.exploit.name}`;
  const amount = formatExploitAmount(props.exploit.amount);
  const date = props.exploit.date;

  return (
    <>
      <NextSeo
        {...defaultSEO}
        title={t('exploits:subpages.meta.title', { exploitName, amount })}
        description={t('exploits:subpages.meta.description', { exploitName, amount, date })}
        openGraph={{
          url: `https://revoke.cash/exploits/${props.exploit.slug}`,
          images: [
            {
              url: `https://revoke.cash/api/og/exploits/${props.exploit.slug}`,
              width: 1200,
              height: 630,
            },
          ],
          site_name: 'Revoke.cash',
          type: 'website',
        }}
      />

      <ContentPageLayout searchBar={false}>
        <Breadcrumb pages={[{ name: t('common:nav.exploits'), href: '/exploits' }, { name: props.exploit.name }]} />
        <div className="flex flex-col gap-4">
          <div>
            <h1 className="text-5xl">{props.exploit.name}</h1>
            <p className="text-2xl font-light">{t('exploits:subpages.subtitle')}</p>
          </div>

          <ExploitCard exploit={props.exploit} />

          <AddressPageContextProvider address={address} initialChainId={getUniqueChainIds(props.exploit)[0]}>
            <AddressForm onSubmit={setAddress} chainIds={getUniqueChainIds(props.exploit)} />
            <ExploitChecker exploit={props.exploit} />
          </AddressPageContextProvider>

          <Button size="md" style="secondary" href="/exploits" className="w-fit gap-2 pl-3" router>
            <ChevronLeftIcon className="h-5 w-5" />
            {t('common:buttons.back_to_exploits')}
          </Button>
        </div>
      </ContentPageLayout>
    </>
  );
};

export const getStaticProps: GetStaticProps<Props> = async (context) => {
  const exploit = await getExploitBySlug(context.params.slug as string, context.locale);

  return {
    props: {
      exploit,
    },
  };
};

export const getStaticPaths: GetStaticPaths = async ({ locales }) => {
  const exploits = await getAllExploits();

  const paths = locales.flatMap((locale) =>
    exploits.map((exploit) => ({
      params: {
        slug: exploit.slug,
      },
      locale,
    })),
  );

  return {
    paths,
    fallback: false,
  };
};

export default ExploitDetailsPage;
