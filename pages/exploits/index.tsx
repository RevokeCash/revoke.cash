import Divider from 'components/common/Divider';
import Href from 'components/common/Href';
import ExploitCard from 'components/exploits/ExploitCard';
import ContentPageLayout from 'layouts/ContentPageLayout';
import { defaultSEO } from 'lib/next-seo.config';
import { Exploit, getAllExploits } from 'lib/utils/allowance-exploit-list';
import { GetStaticProps, NextPage } from 'next';
import { NextSeo } from 'next-seo';
import useTranslation from 'next-translate/useTranslation';

interface Props {
  exploits: Exploit[];
}

const ExploitOverviewPage: NextPage<Props> = (props) => {
  const { t } = useTranslation();

  const totalAmount = `$${Math.floor(props.exploits.reduce((prev, curr) => prev + curr.amount, 0))}M`;
  const earliestYear = props.exploits.at(-1).date.slice(0, 4);

  return (
    <>
      <NextSeo {...defaultSEO} title={t('exploits:meta.title')} description={t('exploits:meta.description')} />

      <ContentPageLayout>
        <h1>Approval Hacks & Exploits</h1>
        <p>
          Over {totalAmount} stolen since {earliestYear}
        </p>
        <Divider className="my-4" />
        <p className="mb-4">
          This page contains an list of known hacks and exploits in which approved user funds are at risk. Many other
          hacks and exploits only affect the funds kept in the exploited smart contract. But the exploits listed on this
          page abuse unlimited token approvals to steal approved funds. By using Revoke.cash to manage your allowances,
          you can keep your funds safe from these exploits. Check if your wallet is affected by clicking on the exploits
          below.
        </p>

        <div className="flex flex-col gap-4">
          {props.exploits.map((exploit) => (
            <Href
              router
              underline="none"
              href={`/exploits/${exploit.slug}`}
              className="hover:bg-zinc-200 dark:hover:bg-zinc-800 duration-100 rounded-lg"
              key={exploit.slug}
            >
              <ExploitCard exploit={exploit} compact />
            </Href>
          ))}
        </div>
      </ContentPageLayout>
    </>
  );
};

export const getStaticProps: GetStaticProps<Props> = async () => {
  const exploits = await getAllExploits();

  return {
    props: {
      exploits,
    },
  };
};

export default ExploitOverviewPage;
