import { ChevronLeftIcon } from '@heroicons/react/24/outline';
import AddressForm from 'components/common/AddressForm';
import Breadcrump from 'components/common/Breadcrump';
import Button from 'components/common/Button';
import ExploitCard from 'components/exploits/ExploitCard';
import ExploitStatus from 'components/exploits/ExploitStatus';
import PublicLayout from 'layouts/PublicLayout';
import { AddressPageContextProvider, useAddressAllowances } from 'lib/hooks/page-context/AddressPageContext';
import { AllowanceData } from 'lib/interfaces';
import { Exploit, getAllExploits, getExploitBySlug } from 'lib/utils/allowance-exploit-list';
import { GetStaticProps } from 'next';
import { DefaultSeo, NextSeo } from 'next-seo';
import useTranslation from 'next-translate/useTranslation';
import { useState } from 'react';

interface Props {
  exploit: Exploit;
}

const ExploitDetailsPage = (props: Props) => {
  const { t } = useTranslation();
  const [address, setAddress] = useState<
    | undefined
    | {
        address: string;
        chainId: number;
      }
  >();

  return (
    <>
      <NextSeo
        {...DefaultSeo}
        title={`Check Your Address for Vulnerability with ${props.exploit.name} Online - Revoke.Cash`}
        description={`Easily check if your address is vulnerable to ${props.exploit.name}. Use our online tool to ensure your crypto assets are safe from this exploit.`}
        openGraph={{
          type: 'website',
          url: `https://revoke.cash/exploits/${props.exploit.slug}`,
          siteName: 'Revoke.cash',
          title: `Check Your Address for Vulnerability with ${props.exploit.name} Online - Revoke.Cash`,
          description: `Easily check if your address is vulnerable to ${props.exploit.name}. Use our online tool to ensure your crypto assets are safe from this exploit.`,
          images: [
            {
              url: 'https://revoke.cash/assets/images/revoke-card.png',
              width: 1600,
              height: 900,
            },
          ],
        }}
      />

      <PublicLayout searchBar={false}>
        <Breadcrump
          pages={[
            { name: 'Exploits', href: '/exploits' },
            {
              name: props.exploit.name,
              href: `/exploits/${props.exploit.slug}`,
            },
          ]}
        />
        <div className="flex flex-col gap-8">
          <div>
            <h1 className="text-5xl">{props.exploit.name}</h1>
            <h2 className="font-light">Easily check if your address is vulnerable.</h2>
          </div>

          <ExploitCard exploit={props.exploit} />

          {!address ? (
            <AddressForm onSubmit={setAddress} chainIds={props.exploit.addresses.map((address) => address.chainId)} />
          ) : (
            <AddressPageContextProvider address={address.address}>
              <AddressForm onSubmit={setAddress} chainIds={props.exploit.addresses.map((address) => address.chainId)} />
              <CheckerResultCard exploit={props.exploit} chainId={address.chainId} address={address.address} />
            </AddressPageContextProvider>
          )}

          <Button size="md" style="secondary" href="/exploits" className="w-52">
            <span className="inline-block mr-2">
              <ChevronLeftIcon className="h-5" />
            </span>
            Back to exploits
          </Button>
        </div>
      </PublicLayout>
    </>
  );
};

const CheckerResultCard = (props: { exploit: Exploit; chainId: number; address: string }) => {
  const { allowances, isLoading } = useAddressAllowances();

  if (isLoading || !allowances) {
    return <div className="h-20 animate-pulse bg-gray-300 rounded-xl "></div>;
  }

  const isAffectedByExploit = isAffected(allowances, props.exploit);

  return <ExploitStatus happy={!isAffectedByExploit} {...props} />;
};

const isAffected = (allowances: AllowanceData[], exploit: Exploit) => {
  return allowances.some((allowance) => {
    return exploit.addresses.some((address) => {
      return address.chainId === allowance.chainId && address.address === allowance.spender;
    });
  });
};

export const getStaticProps: GetStaticProps<Props> = async (context) => {
  const exploit = await getExploitBySlug(context.params.exploit_slug as string);

  return {
    props: {
      exploit,
    },
  };
};

export const getStaticPaths = async () => {
  const exploits = await getAllExploits();

  return {
    paths: exploits.map((exploit) => ({
      params: {
        exploit_slug: exploit.slug,
      },
    })),
    fallback: false,
  };
};

export default ExploitDetailsPage;
