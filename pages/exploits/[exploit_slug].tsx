import { CheckCircleIcon, ChevronRightIcon, ExclamationTriangleIcon } from '@heroicons/react/24/outline';
import Button from 'components/common/Button';
import ChainSelect from 'components/common/ChainSelect';
import LogIn from 'components/common/LogIn';
import ExploitCard from 'components/exploits/ExploitCard';
import PublicLayout from 'layouts/PublicLayout';
import { AddressPageContextProvider, useAddressAllowances } from 'lib/hooks/page-context/AddressPageContext';
import { AllowanceData } from 'lib/interfaces';
import { Exploit, getAllExploits, getExploitBySlug } from 'lib/utils/allowance-exploits-list';
import { GetStaticProps, NextPage } from 'next';
import { DefaultSeo, NextSeo } from 'next-seo';
import useTranslation from 'next-translate/useTranslation';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useState } from 'react';

interface Props {
  exploit: Exploit;
}

const ExploitDetailsPage: NextPage<Props> = (props) => {
  const { t } = useTranslation();
  const [address, setAddress] = useState<undefined | string>();
  const router = useRouter();

  const [selectedChainId, setSelectedChainId] = useState<number>(1);

  const submitHandler = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    const value = event.target[0].value;

    setAddress(value);
  };

  if (!address) {
    return (
      <>
        <NextSeo {...DefaultSeo} title={t('exploits:meta.title')} description={t('exploits:meta.description')} />

        <PublicLayout searchBar={false}>
          <div className="flex flex-col gap-8">
            <div>
              <h1 className="text-5xl">{props.exploit.name}</h1>
              <h2 className="font-light">Easily check if your address is vulnerable.</h2>
            </div>

            <ExploitCard exploit={props.exploit} />

            <form onSubmit={submitHandler} className="flex gap-4">
              <input
                placeholder="Enter your address and check if you are vulnerable"
                defaultValue={'0xbf259d8b25df5708f475a8ac6c6042c5b7c853cf'}
                className="border border-black dark:border-white rounded-lg px-3 text-base sm:text-lg font-medium focus-within:ring-1 focus-within:ring-black dark:focus-within:ring-white grow focus-visible:outline-none address-input bg-transparent"
              />

              <ChainSelect
                chainIds={props.exploit.addresses.map((address) => address.chainId)}
                selected={selectedChainId}
                onSelect={setSelectedChainId}
              />

              <Button icon={ChevronRightIcon} style="primary" size="lg" type="submit">
                Check
              </Button>
            </form>
          </div>
        </PublicLayout>
      </>
    );
  }

  return (
    <>
      <NextSeo {...DefaultSeo} title={t('exploits:meta.title')} description={t('exploits:meta.description')} />

      <PublicLayout>
        <AddressPageContextProvider address={address}>
          <LogIn showSpinner>
            <h1>Exploit Details Page</h1>
            <h2>Is my address vulnerable?</h2>

            <CheckerResultCard exploit={props.exploit} address={address} chainId={selectedChainId} />
          </LogIn>
          <ExploitCard exploit={props.exploit} />
        </AddressPageContextProvider>
      </PublicLayout>
    </>
  );
};

const CheckerResultCard = (props: { exploit: Exploit; chainId: number; address: string }) => {
  const { allowances, isLoading } = useAddressAllowances();

  if (isLoading || !allowances) {
    return <div className="h-32 animate-pulse bg-gray-100 rounded-xl"></div>;
  }

  if (isAffected(allowances, props.exploit))
    return (
      <div className="rounded-md bg-gray-50 border border-black p-4 my-4">
        <div className="flex items-center gap-8 justify-between">
          <div className="flex-shrink-0">
            <ExclamationTriangleIcon className="h-12 text-black" aria-hidden="true" />
          </div>
          <div className="ml-3 flex-1">
            <h3 className="text-sm font-bold text-gray-800">Attention needed</h3>
            <div className="mt-2 text-sm text-gray-700">
              <p>
                Your address is vulnerable to this exploit. We recommend you to revoke the allowance for this address.
              </p>
            </div>
          </div>
          <Link
            href={`/address/${props.address}?chainId=${props.chainId}&spenderSearch=${
              props.exploit.addresses.find((address) => address.chainId === props.chainId).address
            }`}
          >
            <Button size="md" style="secondary">
              Revoke allowance
            </Button>
          </Link>
        </div>
      </div>
    );

  return (
    <div className="rounded-md bg-gray-50 border border-black p-4 my-4">
      <div className="flex items-center gap-8 justify-between">
        <div className="flex-shrink-0">
          <CheckCircleIcon className="h-12 text-black" aria-hidden="true" />
        </div>
        <div className="ml-3 flex-1">
          <h3 className="text-sm font-bold text-gray-800">Happy days</h3>
          <div className="mt-2 text-sm text-gray-700">
            <p>Your address is not vulnerable to this exploit. Have look at all your allowances while you are here.</p>
          </div>
        </div>
        <Button size="md" style="secondary">
          View allowances
        </Button>
      </div>
    </div>
  );
};

const isAffected = (allowances: AllowanceData[], exploit: Exploit) => {
  return allowances.some((allowance) => {
    return exploit.addresses.some((address) => {
      return address.chainId === allowance.chainId && address.address === allowance.spender;
    });
  });
};

export const getStaticProps: GetStaticProps<Props> = async (context) => {
  const exploit = await getExploitBySlug(context.params.exploit_slug as string);

  return {
    props: {
      exploit,
    },
  };
};

export const getStaticPaths = async () => {
  const exploits = await getAllExploits();

  return {
    paths: exploits.map((exploit) => ({
      params: {
        exploit_slug: exploit.slug,
      },
    })),
    fallback: false,
  };
};

export default ExploitDetailsPage;
