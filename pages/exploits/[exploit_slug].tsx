import { ChevronLeftIcon } from '@heroicons/react/24/outline';
import Breadcrumb from 'components/common/Breadcrumb';
import Button from 'components/common/Button';
import AddressForm from 'components/exploits/AddressForm';
import ExploitCard from 'components/exploits/ExploitCard';
import ExploitStatus from 'components/exploits/ExploitStatus';
import ContentPageLayout from 'layouts/ContentPageLayout';
import {
  AddressPageContextProvider,
  useAddressAllowances,
  useAddressPageContext,
} from 'lib/hooks/page-context/AddressPageContext';
import { AllowanceData } from 'lib/interfaces';
import { defaultSEO } from 'lib/next-seo.config';
import { Exploit, getAllExploits, getExploitBySlug, getUniqueChainIds } from 'lib/utils/allowance-exploit-list';
import { GetStaticPaths, GetStaticProps } from 'next';
import { NextSeo } from 'next-seo';
import useTranslation from 'next-translate/useTranslation';
import { useState } from 'react';

interface Props {
  exploit: Exploit;
}

const ExploitDetailsPage = (props: Props) => {
  const { t } = useTranslation();
  const [address, setAddress] = useState<string | undefined>();

  return (
    <>
      <NextSeo
        {...defaultSEO}
        title={`Check Your Address for Vulnerability with ${props.exploit.name} Online - Revoke.Cash`}
        description={`Easily check if your address is vulnerable to ${props.exploit.name}. Use our online tool to ensure your crypto assets are safe from this exploit.`}
        openGraph={{
          type: 'website',
          url: `https://revoke.cash/exploits/${props.exploit.slug}`,
          siteName: 'Revoke.cash',
          title: `Check Your Address for Vulnerability with ${props.exploit.name} Online - Revoke.Cash`,
          description: `Easily check if your address is vulnerable to ${props.exploit.name}. Use our online tool to ensure your crypto assets are safe from this exploit.`,
          images: [
            {
              url: 'https://revoke.cash/assets/images/revoke-card.png',
              width: 1600,
              height: 900,
            },
          ],
        }}
      />

      <ContentPageLayout searchBar={false}>
        <Breadcrumb
          pages={[
            { name: 'Exploits', href: '/exploits' },
            {
              name: props.exploit.name,
              href: `/exploits/${props.exploit.slug}`,
            },
          ]}
        />
        <div className="flex flex-col gap-2">
          <div className="mb-2">
            <h1 className="text-5xl">{props.exploit.name}</h1>
            <h2 className="font-light">Easily check if your address is vulnerable.</h2>
          </div>

          <ExploitCard exploit={props.exploit} />

          <AddressPageContextProvider address={address} initialChainId={getUniqueChainIds(props.exploit)[0]}>
            <AddressForm onSubmit={setAddress} chainIds={getUniqueChainIds(props.exploit)} />
            <CheckerResultCard exploit={props.exploit} />
          </AddressPageContextProvider>

          <Button size="md" style="secondary" href="/exploits" className="w-fit gap-2 pl-3" router>
            <ChevronLeftIcon className="h-5 w-5" />
            Back to exploits
          </Button>
        </div>
      </ContentPageLayout>
    </>
  );
};

const CheckerResultCard = (props: { exploit: Exploit }) => {
  const { address, selectedChainId } = useAddressPageContext();
  const { allowances, isLoading } = useAddressAllowances();

  if (!address || !selectedChainId) {
    return null;
  }

  if (isLoading || !allowances) {
    return (
      <div className="animate-pulse bg-gray-300 rounded-lg">
        {/* Add a placeholder ExploitStatus so the height won't change */}
        <div className="invisible">
          <ExploitStatus happy={true} exploit={props.exploit} address={address} chainId={selectedChainId} />
        </div>
      </div>
    );
  }

  const isAffectedByExploit = isAffected(allowances, props.exploit);

  return (
    <ExploitStatus happy={!isAffectedByExploit} exploit={props.exploit} address={address} chainId={selectedChainId} />
  );
};

const isAffected = (allowances: AllowanceData[], exploit: Exploit) => {
  return allowances.some((allowance) => {
    return exploit.addresses.some((address) => {
      return address.chainId === allowance.chainId && address.address === allowance.spender;
    });
  });
};

export const getStaticProps: GetStaticProps<Props> = async (context) => {
  const exploit = await getExploitBySlug(context.params.exploit_slug as string);

  return {
    props: {
      exploit,
    },
  };
};

export const getStaticPaths: GetStaticPaths = async ({ locales }) => {
  const exploits = await getAllExploits();

  const paths = locales.flatMap((locale) =>
    exploits.map((exploit) => ({
      params: {
        exploit_slug: exploit.slug,
      },
      locale,
    }))
  );

  return {
    paths,
    fallback: false,
  };
};

export default ExploitDetailsPage;
