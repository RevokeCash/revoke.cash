import { ChevronRightIcon, InformationCircleIcon } from '@heroicons/react/24/outline';
import Button from 'components/common/Button';
import Card from 'components/common/Card';
import ChainLogo from 'components/common/ChainLogo';
import ChainSelect from 'components/common/ChainSelect';
import LogIn from 'components/common/LogIn';
import SearchBar from 'components/header/SearchBar';
import PublicLayout from 'layouts/PublicLayout';
import { Exploit, getAllExploits, getExploitBySlug } from 'lib/data/exploits-loader';
import { AddressPageContextProvider, useAddressPageContext } from 'lib/hooks/page-context/AddressPageContext';
import { GetStaticProps, NextPage } from 'next';
import { DefaultSeo, NextSeo } from 'next-seo';
import useTranslation from 'next-translate/useTranslation';
import { useRouter } from 'next/router';
import { useState } from 'react';

interface Props {
  exploit: Exploit;
}

const ExploitDetailsPage: NextPage<Props> = (props) => {
  const { t } = useTranslation();
  const [address, setAddress] = useState<undefined | string>();
  const router = useRouter();

  const [selectedChainId, setSelectedChainId] = useState<number>(1);

  const submitHandler = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    const value = event.target[0].value;

    setAddress(value);
  };

  if (!address) {
    return (
      <>
        <NextSeo {...DefaultSeo} title={t('exploits:meta.title')} description={t('exploits:meta.description')} />

        <PublicLayout searchBar={false}>
          <div className="flex flex-col gap-8">
            <div>
              <h1 className="text-5xl">{props.exploit.name}</h1>
              <h2 className="font-light">Easily check if your address is vulnerable.</h2>
            </div>

            <Card icon={InformationCircleIcon} title={`Details`} className="flex flex-col gap-4 ">
              <table className="table w-full">
                <tbody className="divide-y ">
                  <tr>
                    <td className="py-1">Name</td>
                    <td className="py-1">{props.exploit.name}</td>
                  </tr>
                  <tr>
                    <td className="py-1">Discoverd on</td>
                    <td className="py-1">{props.exploit.date}</td>
                  </tr>
                  <tr>
                    <td className="py-1">Affected chains</td>
                    <td className="py-1 flex gap-2">
                      {props.exploit.addresses.map((address, index) => (
                        <ChainLogo tooltip chainId={address.chainId} key={index} />
                      ))}
                    </td>
                  </tr>
                </tbody>
              </table>

              <p>{props.exploit.description}</p>
            </Card>

            <form onSubmit={submitHandler} className="flex gap-4">
              <input
                placeholder="Enter your address and check if you are vulnerable"
                defaultValue={'0xbf259d8b25df5708f475a8ac6c6042c5b7c853cf'}
                className="border border-black dark:border-white rounded-lg px-3 text-base sm:text-lg font-medium focus-within:ring-1 focus-within:ring-black dark:focus-within:ring-white grow focus-visible:outline-none address-input bg-transparent"
              />

              <ChainSelect
                chainIds={props.exploit.addresses.map((address) => address.chainId)}
                selected={selectedChainId}
                onSelect={setSelectedChainId}
              />

              <Button icon={ChevronRightIcon} style="primary" size="lg" type="submit">
                Check
              </Button>
            </form>
          </div>
        </PublicLayout>
      </>
    );
  }

  return (
    <>
      <NextSeo {...DefaultSeo} title={t('exploits:meta.title')} description={t('exploits:meta.description')} />

      <PublicLayout>
        <h1>{props.exploit.name} Checker</h1>
        <h3>Easily check if your address is vulnerable.</h3>

        <SearchBar onSubmit={setAddress} />

        <AddressPageContextProvider address={address}>
          <LogIn showSpinner>
            <h1>Exploit Details Page</h1>
            <h2>Is my address vulnerable?</h2>

            <CheckerResultCard />
          </LogIn>
        </AddressPageContextProvider>
      </PublicLayout>
    </>
  );
};

const CheckerResultCard: React.FC = () => {
  const allowances = useAddressPageContext();

  return (
    <Card title="Checker Result" className="flex flex-col gap-4">
      <pre>
        <code>{JSON.stringify(allowances, null, 2)}</code>
      </pre>
    </Card>
  );
};

export const getStaticProps: GetStaticProps<Props> = async (context) => {
  const exploit = await getExploitBySlug(context.params.exploit_slug as string);

  return {
    props: {
      exploit,
    },
  };
};

export const getStaticPaths = async () => {
  const exploits = await getAllExploits();

  return {
    paths: exploits.map((exploit) => ({
      params: {
        exploit_slug: exploit.slug,
      },
    })),
    fallback: false,
  };
};

export default ExploitDetailsPage;
