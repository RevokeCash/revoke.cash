export type Exploit = {
  slug: string;
  name: string;
  description: string;
  date: string;
  addresses: {
    chainId: number;
    address: string;
  }[];
  metaArticleUrls: string[];
};

type GithubFile = {
  name: string;
  path: string;
  sha: string;
  size: number;
  url: string;
  html_url: string;
  git_url: string;
  download_url: string;
  type: 'file' | 'dir' | 'symlink';
  _links: {
    self: string;
    git: string;
    html: string;
  };
};

export const getAllExploits = async (): Promise<Exploit[]> => {
  const exploitGithubFiles = await getGithubFilesFromRepository('RevokeCash', 'allowance-exploits-list', '/exploits');

  const exploits: Exploit[] = await Promise.all(
    exploitGithubFiles.map(async (exploitGithubFile) =>
      exploitGithubFile.type === 'file'
        ? fetch(exploitGithubFile.download_url)
            .then((res) => res.json())
            .then((file) => {
              return {
                ...file,
                slug: exploitGithubFile.name.replace('.json', ''),
              };
            })
        : null
    )
  );

  return exploits;
};

export const getExploitBySlug = async (slug: string): Promise<Exploit> => {
  const exploitGithubFiles = await getGithubFilesFromRepository(
    'RevokeCash',
    'allowance-exploits-list',
    `/exploits/${slug}.json`
  );

  if (exploitGithubFiles.length === 0) {
    throw new Error(`Exploit ${slug} not found`);
  }

  if (exploitGithubFiles.length > 1) {
    throw new Error(`Exploit ${slug} has multiple files`);
  }

  const exploit = await fetch(exploitGithubFiles[0].download_url);
  const exploitJson = await exploit.json();

  return exploitJson;
};

/**
 *
 * @param organisation
 * @param repository
 * @param path should start with a slash
 */
const getGithubFilesFromRepository = async (
  organisation: string,
  repository: string,
  path = '/'
): Promise<GithubFile[]> => {
  const url = `https://api.github.com/repos/${organisation}/${repository}/contents${path}`;

  // This is a workaround for the Github API rate limit of 60 requests per hour.
  if (process.env.NODE_ENV === 'development') {
    return mockGithubResult;
  }

  const response = await fetch(url);

  if (response.status !== 200) {
    throw new Error(`Error fetching ${url}! Status: ${response.statusText}`);
  }

  return response.json();
};

const mockGithubResult: GithubFile[] = [
  {
    name: 'sushiswap-2023-04-09.json',
    path: 'exploits/sushiswap-2023-04-09.json',
    sha: '3ef565ba2dd421d5513e1ff3c93d7b370455d97a',
    size: 1596,
    url: 'https://api.github.com/repos/RevokeCash/allowance-exploits-list/contents/exploits/sushiswap-2023-04-09.json?ref=main',
    html_url: 'https://github.com/RevokeCash/allowance-exploits-list/blob/main/exploits/sushiswap-2023-04-09.json',
    git_url:
      'https://api.github.com/repos/RevokeCash/allowance-exploits-list/git/blobs/3ef565ba2dd421d5513e1ff3c93d7b370455d97a',
    download_url:
      'https://raw.githubusercontent.com/RevokeCash/allowance-exploits-list/main/exploits/sushiswap-2023-04-09.json',
    type: 'file',
    _links: {
      self: 'https://api.github.com/repos/RevokeCash/allowance-exploits-list/contents/exploits/sushiswap-2023-04-09.json?ref=main',
      git: 'https://api.github.com/repos/RevokeCash/allowance-exploits-list/git/blobs/3ef565ba2dd421d5513e1ff3c93d7b370455d97a',
      html: 'https://github.com/RevokeCash/allowance-exploits-list/blob/main/exploits/sushiswap-2023-04-09.json',
    },
  },
];
