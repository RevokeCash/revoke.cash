export type Exploit = {
  slug: string;
  name: string;
  description: string;
  date: string;
  addresses: {
    chainId: number;
    address: string;
  }[];
  metaArticleUrls: string[];
};

type GithubFile = {
  name: string;
  path: string;
  sha: string;
  size: number;
  url: string;
  html_url: string;
  git_url: string;
  download_url: string;
  type: 'file' | 'dir' | 'symlink';
  _links: {
    self: string;
    git: string;
    html: string;
  };
};

const ORGANISATION = 'RevokeCash';
const REPOSITORY = 'allowance-exploits-list';

export const getAllExploits = async (): Promise<Exploit[]> => {
  const index = (await fetchGithubFile(ORGANISATION, REPOSITORY, '/index.json')) as string[];

  const promises = index.map(getExploitBySlug);

  const exploits = await Promise.all(promises);

  return exploits;
};

export const getExploitBySlug = async (slug: string): Promise<Exploit> => {
  const exploit = (await fetchGithubFile(ORGANISATION, REPOSITORY, `/exploits/${slug}.json`)) as Exploit;
  exploit.slug = slug;

  return exploit;
};

const fetchGithubFile = async (organisation: string, repository: string, path: string) => {
  const url = `https://raw.githubusercontent.com/${organisation}/${repository}/main${path}`;

  const response = await fetch(url);

  if (response.status !== 200) {
    throw new Error(`Error fetching ${url}! Status: ${response.statusText}`);
  }

  return response.json();
};
