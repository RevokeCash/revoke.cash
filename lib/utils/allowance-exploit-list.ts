import { AllowanceData } from 'lib/interfaces';
import { deduplicateArray } from '.';
import { CHAIN_SELECT_MAINNETS } from './chains';

export type Exploit = {
  slug: string;
  name: string;
  description: string;
  date: string;
  amount: number;
  addresses: {
    chainId: number;
    address: string;
  }[];
  metaArticleUrls: string[];
};

const ORGANISATION = 'RevokeCash';
const REPOSITORY = 'allowance-exploit-list';
export const REPORT_EXPLOIT_URL = `https://github.com/${ORGANISATION}/${REPOSITORY}/issues/new?assignees=&labels=submission%2Cexploit&projects=&template=REPORT-EXPLOIT.yml`;

export const getAllExploits = async (): Promise<Exploit[]> => {
  const index = (await fetchGithubFile(ORGANISATION, REPOSITORY, '/index.json')) as string[];

  const promises = index.map(getExploitBySlug);

  const exploits = await Promise.all(promises);

  // sort exploits by date descending
  exploits.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

  return exploits;
};

export const getExploitBySlug = async (slug: string): Promise<Exploit> => {
  const exploit = (await fetchGithubFile(ORGANISATION, REPOSITORY, `/exploits/${slug}.json`)) as Exploit;
  exploit.slug = slug;

  return exploit;
};

const fetchGithubFile = async (organisation: string, repository: string, path: string) => {
  const url = `https://raw.githubusercontent.com/${organisation}/${repository}/main${path}`;

  const response = await fetch(url);

  if (response.status !== 200) {
    throw new Error(`Error fetching ${url}! Status: ${response.statusText}`);
  }

  return response.json();
};

export const getUniqueChainIds = (exploit: Exploit): number[] => {
  const sorter = (a: number, b: number) => {
    const indexOfA = CHAIN_SELECT_MAINNETS.indexOf(a);
    const indexOfB = CHAIN_SELECT_MAINNETS.indexOf(b);
    if (indexOfA === -1) return 1;
    if (indexOfB === -1) return -1;
    return indexOfA - indexOfB;
  };

  const allChainIds = exploit.addresses.map((address) => address.chainId);
  const uniqueChainIds = deduplicateArray(allChainIds);
  const sortedChainIds = uniqueChainIds.sort(sorter);

  return sortedChainIds;
};

export const isAffectedByExploit = (allowances: AllowanceData[], exploit: Exploit) => {
  return allowances.some((allowance) => {
    return exploit.addresses.some((address) => {
      return address.chainId === allowance.chainId && address.address === allowance.spender;
    });
  });
};

export const formatExploitAmount = (amountInMillions: number) => {
  if (amountInMillions === 0) return `$${amountInMillions}`;
  if (amountInMillions < 1) return `$${amountInMillions * 1000}k`;
  return `$${amountInMillions}M`;
};
