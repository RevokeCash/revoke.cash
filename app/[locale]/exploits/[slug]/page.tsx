import { ChevronLeftIcon } from '@heroicons/react/24/outline';
import ContentPageLayout from 'app/layouts/ContentPageLayout';
import Breadcrumb from 'components/common/Breadcrumb';
import Button from 'components/common/Button';
import Divider from 'components/common/Divider';
import PageNavigation from 'components/common/PageNavigation';
import ExploitCard from 'components/exploits/ExploitCard';
import NextIntlClientProvider from 'lib/i18n/NextIntlClientProvider';
import { locales } from 'lib/i18n/config';
import { formatExploitAmount, getAllExploits } from 'lib/utils/exploits';
import { Metadata } from 'next';
import { getMessages, getTranslations, unstable_setRequestLocale } from 'next-intl/server';
import ExploitCheckerWrapper from './ExploitChecker';

interface Props {
  params: {
    locale: string;
    slug: string;
  };
}

export const generateStaticParams = async () => {
  const exploits = await getAllExploits();
  return locales.flatMap((locale) => exploits.map((exploit) => ({ locale, slug: exploit.slug })));
};

export const generateMetadata = async ({ params: { locale, slug } }): Promise<Metadata> => {
  const { exploit } = await getStaticProps({ locale, slug });
  const t = await getTranslations();

  const year = String(new Date(exploit.date).getFullYear());
  const exploitName = exploit.name.includes(year) ? exploit.name : `${year} ${exploit.name}`;
  const amount = formatExploitAmount(exploit.amount);
  const date = exploit.date;

  return {
    title: t('exploits.subpages.meta.title', { exploitName, amount }),
    description: t('exploits.subpages.meta.description', { exploitName, amount, date }),
  };
};

const ExploitDetailsPage = async ({ params }: Props) => {
  unstable_setRequestLocale(params.locale);

  const { exploit, navigationalPages } = await getStaticProps(params);
  const t = await getTranslations({ locale: params.locale });
  const messages = await getMessages({ locale: params.locale });

  return (
    <ContentPageLayout>
      <Breadcrumb pages={[{ name: t('common.nav.exploits'), href: '/exploits' }, { name: exploit.name }]} />
      <div className="flex flex-col gap-4">
        <div>
          <h1 className="text-5xl">{exploit.name}</h1>
          <p className="text-2xl font-light">{t('exploits.subpages.subtitle')}</p>
        </div>

        <ExploitCard exploit={exploit} />
        <NextIntlClientProvider messages={{ common: messages.common, exploits: messages.exploits }}>
          <ExploitCheckerWrapper exploit={exploit} />
        </NextIntlClientProvider>
      </div>
      <Divider className="my-6" />
      <PageNavigation currentPath={`/exploits/${exploit.slug}`} pages={navigationalPages} />
      <Button
        size="md"
        style="secondary"
        href="/exploits"
        className="w-fit gap-2 pl-3 border-zinc-300 dark:border-zinc-700"
        router
      >
        <ChevronLeftIcon className="h-5 w-5" />
        {t('common.buttons.back_to_exploits')}
      </Button>
    </ContentPageLayout>
  );
};

const getStaticProps = async (params: Props['params']) => {
  const exploits = await getAllExploits();
  const exploitIndex = exploits.findIndex((e) => e.slug === params.slug);

  const exploit = exploits[exploitIndex];

  // Only extract the page titles and paths for the pages before and after the current page for navigation
  const navigationalPages = exploits
    .slice(Math.max(exploitIndex - 1, 0), Math.min(exploitIndex + 2, exploits.length))
    .map((exploit) => ({ title: exploit.name, path: `/exploits/${exploit.slug}` }));

  return {
    exploit,
    navigationalPages,
  };
};

export default ExploitDetailsPage;
