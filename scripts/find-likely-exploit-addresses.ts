import { getLogsProvider } from 'lib/providers';
import { addressToTopic, deduplicateArray } from 'lib/utils';
import {
  CHAIN_SELECT_MAINNETS,
  createViemPublicClientForChain,
  getChainExplorerUrl,
  getChainName,
  isCovalentSupportedChain,
} from 'lib/utils/chains';
import { Address, getAddress } from 'viem';

// Before running, update logs.ts and providers.ts to work with localhost.

const receivingAddress = process.argv[2];

const promises = CHAIN_SELECT_MAINNETS.map(async (chainId) => {
  const publicClient = createViemPublicClientForChain(chainId);
  const logsProvider = getLogsProvider(chainId);
  const toBlock = await publicClient.getBlockNumber();
  const logs = await logsProvider.getLogs({
    fromBlock: 0,
    toBlock: isCovalentSupportedChain(chainId) ? Number(toBlock) - 50 : Number(toBlock),
    topics: [
      '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',
      null,
      addressToTopic(receivingAddress as Address),
    ],
  });

  const transactions = await Promise.all(logs.map((log) => publicClient.getTransaction({ hash: log.transactionHash })));
  return [chainId, transactions] as const;
});

Promise.all(promises).then((results) => {
  const res = [];
  results.forEach(([chainId, transactions]) => {
    const froms = deduplicateArray(transactions.map((transaction) => getAddress(transaction.from)));
    const tos = deduplicateArray(transactions.map((transaction) => getAddress(transaction.to)));

    const whitelisted = [
      '0x00000000000000ADc04C56Bf30aC9d3c0aAF14dC', // Seaport 1.5
      '0x6AB0CA9c94FDE313a3A1d34A8247ae6065Bd2E73', // Fantom Universal Router
    ];

    const allAddresses = [...froms, ...tos].filter((address) => !whitelisted.includes(address));

    allAddresses.forEach((to) => {
      res.push({ chainId, address: getAddress(to) });
    });

    deduplicateArray(transactions.map((transaction) => transaction.hash)).forEach((hash) => {
      console.log(`${getChainName(chainId)}: ${getChainExplorerUrl(chainId)}/tx/${hash}`);
    });
  });

  console.log(JSON.stringify(res, null, 2));
});
